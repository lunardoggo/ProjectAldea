#pragma kernel CSMain

struct Biome
{
    float minTemperature;
    float maxTemperature;
    float minHumidity;
    float maxHumidity;
    float minHeight;
    float maxHeight;
    float4 color;
};

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float4> colors;
RWStructuredBuffer<int> triangles;
RWStructuredBuffer<Biome> biomes;
RWTexture2D<float4> terrainMap;
uint2 dimensions;
uint biomeCount;
float2 offset;
float scale;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int vert = id.x + dimensions.x * id.y;
    uint2 pos = id.xy + offset;

    float y = terrainMap[pos].x;
    y = 3.5 * pow(y - 0.47, 3) + 0.15 * sin(y - 0.47) + 0.4; //make flat areas more pronounced

    vertices[vert] = float3(id.x, y * scale, id.y);

    if(id.x < dimensions.x - 1 && id.y < dimensions.y - 1)
    {
        int index = 6 * vert;

        triangles[index] = vert;
        triangles[index + 1] = vert + dimensions.x + 1;
        triangles[index + 2] = vert + 1;
        triangles[index + 3] = vert;
        triangles[index + 4] = vert + dimensions.x;
        triangles[index + 5] = vert + dimensions.x + 1;
    }

    if(biomeCount > 0)
    {
        float elevation = terrainMap[pos].x;
        float temperature = terrainMap[pos].y;
        float humidity = terrainMap[pos].z;

        for(uint i = 0; i < biomeCount; i++)
        {
            Biome biome = biomes[i];

            if(   biome.minHeight <= elevation && biome.maxHeight >= elevation
               && biome.minTemperature <= temperature && biome.maxTemperature >= temperature
               && biome.minHumidity <= humidity && biome.maxHumidity >= humidity)
             {
                colors[vert] = biome.color;
                break;
             }
        }
    }
    else
    {
        colors[vert] = float4(terrainMap[id.xy + offset].y, 0, terrainMap[id.xy + offset].z, 0);
    }
}
