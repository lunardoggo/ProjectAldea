#pragma kernel CSTerrainMap



// Output
RWTexture2D<float4> terrainMap;

// Input
float persistance;
float lacunarity;
uint2 resolution;
float2 offset;
uint octaves;
float scale;

float positionFalloff(float2 position, float falloffRadius, float falloff);
float temperature(float2 position, float elevation);
float humidity(float2 position, float elevation);
float height(float2 position);
float snoise01(float2 v);

[numthreads(8, 8, 1)]
void CSTerrainMap(uint3 id : SV_DispatchThreadID)
{
    //TerrainMap
    float h = height(id.xy / scale) * positionFalloff(id.xy, resolution.x * 0.45, 64);

    //Biome map
    float temp = temperature(id.xy, h);
    float hum = humidity(id.xy, h);
    
    terrainMap[id.xy] = float4(h, temp, hum, 0); //float4(temp, 0, 0, 0);// float4(h, temp, humidity, 0);
}

float height(float2 position)
{
    float frequency = 1;
    float amplitude = 1;
    float height = 0;
    float norm = 0;
    
    for(uint i = 0; i < octaves; i++)
    {
        height += snoise01((offset + position) * frequency) * amplitude;
        norm += amplitude;

        amplitude *= persistance;
        frequency *= lacunarity;
    }
    return height / norm;
}

float positionFalloff(float2 position, float falloffRadius, float falloff)
{
    float2 center = resolution / 2.0;
    float2 offset = position - center;
    float h = 1;

    float distance = sqrt(pow(offset.x, 2) + pow(offset.y, 2));

    if(distance > falloffRadius)
    {
        float diff = distance - falloffRadius;
        h = lerp(0, 1, max(0, falloff - diff) / falloff);
    }

    return h;

    /*float h = 1;
    if(position.y < falloffSize || position.y > resolution.y - falloffSize)
    {
        float val = min(position.y, resolution.y - position.y) / falloffSize;
        h *= lerp(0, 1, val);
    }
    if(position.x < falloffSize || position.x > resolution.x - falloffSize)
    {
        float val = min(position.x, resolution.x - position.x) / falloffSize;
        h *= lerp(0, 1, val);
    }
    return h;*/
}

float temperature(float2 position, float elevation)
{
    //Colder temperatures on the north and south edges of the map as well as on higher elevations
    float tropicThreshold = 1;//resolution.y * 0.3;
    float multiplier = 1;
    if(position.y < tropicThreshold || position.y > resolution.y - tropicThreshold)
    {
        float val = min(position.y, resolution.y - position.y) / tropicThreshold;
        multiplier = lerp(0, 1, val);
    }
    return multiplier * (1 - elevation) * snoise01((offset / 200.0 + position) / (scale * 1.25));
}

float humidity(float2 position, float elevation)
{
    return (1 - elevation) * snoise01((offset * 3 + position) / (scale * 0.75));
}

// Copied from GitHub https://gist.github.com/dario-zubovic/e8c4b1f6619b69ba2090123a6e1c2584
// based on https://github.com/keijiro/NoiseShader/blob/master/Assets/GLSL/SimplexNoise2D.glsl
// which itself is modification of https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl
//
// License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//           Distributed under the MIT License. See LICENSE file.
//           https://github.com/keijiro/NoiseShader/blob/master/LICENSE
//           https://github.com/ashima/webgl-noise
//           https://github.com/stegu/webgl-noise

float3 mod289(float3 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float2 mod289(float2 x)
{
    return x - floor(x * (1.0 / 289.0)) * 289.0;
}

float3 permute(float3 x)
{
    return mod289((x * 34.0 + 1.0) * x);
}

float3 taylorInvSqrt(float3 r)
{
    return 1.79284291400159 - 0.85373472095314 * r;
}

// output noise is in range [-1, 1]
float snoise(float2 v)
{
    const float4 C = float4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
    -0.577350269189626, // -1.0 + 2.0 * C.x
    0.024390243902439); // 1.0 / 41.0

    // First corner
    float2 i = floor(v + dot(v, C.yy));
    float2 x0 = v - i + dot(i, C.xx);

    // Other corners
    float2 i1;
    i1.x = step(x0.y, x0.x);
    i1.y = 1.0 - i1.x;

    // x1 = x0 - i1  + 1.0 * C.xx;
    // x2 = x0 - 1.0 + 2.0 * C.xx;
    float2 x1 = x0 + C.xx - i1;
    float2 x2 = x0 + C.zz;

    // Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    float3 p =
    permute(permute(i.y + float3(0.0, i1.y, 1.0)) + i.x + float3(0.0, i1.x, 1.0));

    float3 m = max(0.5 - float3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);
    m *= m * m * m;

    // Gradients: 41 points uniformly over a line, mapped onto a diamond.
    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
    float3 x = 2.0 * frac(p * C.www) - 1.0;
    float3 h = abs(x) - 0.5;
    float3 ox = floor(x + 0.5);
    float3 a0 = x - ox;

    // Normalise gradients implicitly by scaling m
    m *= taylorInvSqrt(a0 * a0 + h * h);

    // Compute final noise value at P
    float3 g = float3(
    a0.x * x0.x + h.x * x0.y,
    a0.y * x1.x + h.y * x1.y,
    g.z = a0.z * x2.x + h.z * x2.y);
    return 130.0 * dot(m, g);
}

float snoise01(float2 v)
{
    return snoise(v) * 0.5 + 0.5;
}
